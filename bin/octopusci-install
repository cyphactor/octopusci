#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

APP_NAME = "octopusci-install"

require 'rubygems'
require 'octopusci/version'
require 'trollop'

module Octopusci
	class Installer
		def initialize(opts)
			@opts = opts
		end

		def install
			# check if the specified account name exists
			if account_exists?(@opts[:account]) # exit informing the user to pick a new one
				warning("The \"#{@opts[:account]}\" user account already exists.")
			else
				create_account(@opts[:account])
			end
		end

		private

		def create_account(account_name)
			not_implemented
		end

		# Returns a boolean identifying if an account with the given name already exists or not
		def account_exists?(account_name)
			if on_mac?
				cmd_out = `dscl . -search /Users name "#{account_name}"`
				return cmd_out.empty? ? false : true
			else
				not_implenented
			end
		end

		# Get a boolean representing if this is running on a Mac or not.
		def on_mac?
			return RUBY_PLATFORM.downcase.include?("darwin") ? true : false
		end

		def warning(msg)
			if @opts[:force]
				puts "Warning: (Bypassed by -f) #{msg}"
			else
				puts "Warning: #{msg}"
				exit 2
			end
		end

		def error(msg)
			puts "Error: #{msg}"
			exit 1
		end

		def not_implemented
			error("Not currently implemented")
		end

	end
end

opts = Trollop::options do
  version "Octopusci v#{Octopusci::Version} (c) Andrew De Ponte"
  banner """Usage: #{APP_NAME} [-i|--install|-a|--account|-v|--version|-h|--help]"""
  opt :install, "Actually install Octopusci.", :short => "-i", :default => false
  opt :force, "Force the install to continue ignoring warnings", :short => "-f", :default => false
  opt :account, "Account name to create for the Octopusci install", :short => "-a", :default => "octopusci"
end

if Process.uid != 0
  error("Must run as root.")
end

installer = Octopusci::Installer.new(opts)

installer.install
