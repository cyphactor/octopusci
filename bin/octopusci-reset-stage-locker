#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'rubygems'
require 'octopusci'
require 'trollop'

opts = Trollop::options do
  version "Octopusci v#{Octopusci::Version} (c) Andrew De Ponte"
  banner """Usage: octopusci-reset-stage-locker [-r|-v|--version|-h|--help]"""
  opt :reset, "Actually reset the stage locker", :short => "-r", :default => false
end

if opts[:reset]
  Octopusci::StageLocker.load(Octopusci::Config['stages'])
  puts "Reset the Octopusci StageLocker"
else
	puts """THIS IS A WARNING. THIS IS A DESTRUCTIVE COMMAND!

This command is designed to allow you to reset/clear out the Octopusci StageLocker
and repopulate it with the stages defined in the config. If you run this command
with the proper option it will actually get rid of the Octopusci StageLocker and
recreate it with the stage values from the Octopusci config. It is intended to be
used very rarely.

The primary use case for it is that you have added a stage to your Octopusci setup
after already doing the initial setup. Running this command is necessary to make
Octopusci aware of the new stages you have added to the config since the initial
setup.

WARNING: You should not run this command until all job processes have completed.
Running 'octopusci-tentacles stop' only requests that the tentacles stop running
future jobs and the kill themselves off once they are done with any current jobs
they are running. So, be sure you wait for the currently running jobs to exist
before you run this command or you could end up with multiple jobs running on a
single stage.

To go forward and actually reset the Octopusci StageLocker simply run the command
using the following example.

Example:
octopusci-reset-stage-locker -r

"""

end
