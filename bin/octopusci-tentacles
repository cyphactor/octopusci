#!/usr/bin/env ruby

def display_help
  puts "Usage: octopusci-tentacles <command>"
  puts "  Acceptable Commands:"
  puts "    start - Cleanup existing workers and start new worker processes in the background"
  puts "     stop - Signals workers to exit when current job is finished"
  puts "  restart - Synonym for the 'start' command, just here for convenience"
  puts "     help - Display this help"
  puts ""
  puts "  Example: octopusci-tentacles start"
  puts ""
end

if !["start", "stop", "restart", "help"].include?(ARGV[0])
  display_help()
  exit 1
end

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'rubygems'
require 'octopusci'

# The StageLocker.load() method is called here not only to set things into
# valid initial state. But, also in the case that octopusci-tentacles was
# killed it nukes the potentially screwed up state the redis data is in and
# initializes it the proper state based on the config.
if Octopusci::CONFIG.has_key?('stages')
  Octopusci::StageLocker.load(Octopusci::CONFIG['stages'])
end

case ARGV[0]
  when "start"
    Octopusci::WorkerLauncher.cleanup_existing_workers()
    Octopusci::WorkerLauncher.launch()
  when "restart"
    Octopusci::WorkerLauncher.cleanup_existing_workers()
    Octopusci::WorkerLauncher.launch()    
  when "stop"
    Octopusci::WorkerLauncher.cleanup_existing_workers()
  when "help"
    display_help()
end
