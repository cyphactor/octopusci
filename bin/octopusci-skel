#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'rubygems'
require 'octopusci'
require 'fileutils'
require 'trollop'

if Process.uid != 0
  puts "Must run as root"
  exit 1
end

opts = Trollop::options do
  version "Octopusci v#{Octopusci::Version} (c) Andrew De Ponte"
  banner """Usage: octopusci-skel [-n|-v|--version|-h|--help] <subcommand>"""
  opt :dry_run, "Don't actually do anything but describe what it would do", :short => "-n"
end

JOBS_PATH = '/etc/octopusci/jobs'
CONFIG_PATH = '/etc/octopusci/config.yml'

config_default_content = """general:
  jobs_path: \"/etc/octopusci/jobs\"
  base_url: \"http://localhost:9998\"
  workspace_base_path: \"/Users/octopusci/.octopusci\"

http_basic:
  username: admin
  password: admin

smtp:
  notification_from_email: somefrom@example.com
  address: smtp.gmail.com
  port: 587
  authentication: plain
  enable_starttls_auto: true
  user_name: someuser@example.com
  password: somepassword
  raise_delivery_errors: true

projects:
  - { name: octopusci, owner: cyphactor, job_klass: SomeJobClass, repo_uri: 'git@github.com:cyphactor/octopusci.git', default_email: devs@example.com }

stages:
  - test_a
"""

if opts[:dry_run]
  puts "This is a Dry Run\n  No actions have been taken this is simply a description of what would normally take place.\n\n"
  puts "  1. mkdir -p #{JOBS_PATH}"
  puts "  2. Create example config (#{CONFIG_PATH}) if one doesn't exist"
else
  FileUtils.mkdir_p(JOBS_PATH)

  if !File.exists?(CONFIG_PATH)
    File.open(CONFIG_PATH, 'w') do |f|
      f << config_default_content
    end
    puts "Created example #{CONFIG_PATH}, please modify appropriately"
  else
    puts "#{CONFIG_PATH} already exists, exiting to avoid modification."
    puts "If you would like to generate the example config again please rename the existing #{CONFIG_PATH}."
  end
end
