The purpose of this project is provide a simple CI server that will work with
GitHub Post-Receive hook. It is also specifically designed to handle multiple
build/job queues for each branch.

This would basically allow you to every time code is pushed to the central
repository enqueue a build/job for the specific branch. That way if you
have topic branches that are being pushed to the central repository along
side the mainline branch they will get queue properly as well.

My idea for implementation at this point is that if I can detect the branch
from the GitHub Post-Receive hook then I can identify branch. If I can
identify branch then I can maintain individual queues for each branch.

Then the execution would look at config values for predefined branches and
priorities for order of running them so that the mainline branch running its
jobs could take precedence over non specified topic branches.

Install redis and get it starting up appropriately

gem install octopusci
sudo octopusci-skel
octopusci-db-migrate

Then update the /etc/octopusci/config.yml appropriately.

Add any jobs you would like to the /etc/octopusci/jobs directory as rb files
and octopusci will load them appropriately when started.

Figure out what directory the gem is installed in by running the following
command and stripping off the lib/octopusci.rb at the end.

gem which octopusci

Once you have the path we can use that path to setup Passenger with Apache
or something else like nginx as well as setup the database. Note: You will
need to setup a database user and a database for octopusci. The settings for
these should be stored in /etc/octopusci/config.yml.

rake -f /path/of/octpusci/we/got/before/Rakefile db:migrate

<VirtualHost *:80>
  ServerName octopusci.example.com
  PassengerAppRoot /path/of/octpusci/we/got/before
  DocumentRoot /path/of/octpusci/we/got/before/lib/octopusci/server/public
  <Directory /path/of/octpusci/we/got/before/lib/octopusci/server/public>
    Order allow,deny
    Allow from all
    AllowOverride all
    Options -MultiViews
  </Directory>
</VirtualHost>

The above will give us the web Octopusci web interface.

If you are developing you can simply start this up by running
rackup -p whatever_port while inside the octopusci directory where the
config.ru file exists.

I recommend you setup the second half of Octopusci (octopusci-tentacles) with
God or some other monitoring system. However, for development you can simply
run octopusci-tentacles directoly as follows:

otopusci-tentacles
